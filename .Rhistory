plot(df$tot_casosconf)
plot(df$tot_casosconf. df$tot_fallecidos)
plot(df$tot_casosconf, df$tot_fallecidos)
plot(df$tot_fallecidos)
plot(df$tot_fallecidos/df$tot_casosconf)
library(readr)
df<-read_csv('https://docs.google.com/spreadsheets/d/16-bnsDdmmgtSxdWbVMboIHo5FRuz76DBxsz_BbsEVWA/export?format=csv&id=16-bnsDdmmgtSxdWbVMboIHo5FRuz76DBxsz_BbsEVWA&gid=0')
df
install.packages(c("sf", "rworldxtra", "tidyverse"))
colnames(Mundo)
Mundo <- st_as_sf(countriesHigh)
install.packages("sf")
Mundo <- st_as_sf(countriesHigh)
library(sf)
library(tidyverse)
library(rworldxtra)
install.packages("sp")
install.packages("sp")
library(sf)
library(tidyverse)
library(rworldxtra)
data("countriesHigh")
Mundo <- st_as_sf(countriesHigh)
install.packages("rgeos")
library(sf)
library(tidyverse)
library(rworldxtra)
data("countriesHigh")
Mundo <- st_as_sf(countriesHigh)
View(Mundo)
colnames(Mundo)
Africa <- Mundo %>% filter(continent=="Africa")
colnames(Africa)
ggplot() + geom_sf(data=Africa, aes(fill=population))
ggplot() + geom_sf(data=Africa, aes(fill=POP_EST))
PBI_Alto <- Mundo %>% filter(GDP_MD_EST >= median(Mundo$GDP_MD_EST))
View(PDI_Alto)
View(PBI_Alto)
ggplot(data=1:10) +geom_point()
f = tibble(x = 1:100, y = sin(x/50) * x)
f
plot(f)
f = tibble(x = 1:100, y = sin(x/20) * x)
ggplot(data=1:10) +geom_point()
f = tibble(x = 1:100, y = sin(x/20) * x)
ggplot(data=f) +geom_point()
plot(f)
Africa <- Africa %>% mutate(Poblacion_mill = POP_EST / 1e6)
ggplot() + geom_sf(data=Africa, aes(fill=Poblacion_mill))
ggplot() + geom_sf(data=Mundo) + geom_sf(data=PBI_Alto, aes(fill=Poblacion_mill)) + theme_dark()
View(f)
View(Africa)
ggplot() + geom_sf(data=Africa, aes(fill=PBI_pc))
ggplot() + geom_sf(data=Africa, aes(fill=PBI_pc))
Ale <- Africa %>% select(NAME, Poblacion_mill, PBI_pc)
View(Ale)
Ale <- Africa %>% select(NAME, Poblacion_mill, PBI_pc)
View(Ale)
View(PBI_Alto)
Africa %>% select(NAME, Poblacion_mill, PBI_pc)
Africa
Ale <- Africa %>% select(NAME, Poblacion_mill, PBI_pc)
Africa$NAME
Africa$Poblacion_mill
Africa <- Africa %>% mutate(PBI_pc = GDP_MD_EST / POP_EST)
Ale <- Africa %>% select(NAME, Poblacion_mill, PBI_pc)
View(Ale)
Ale <- Africa %>% select(NAME, Poblacion_mill, PBI_pc, GLOCAF)
View(Ale)
write_sf(Ale, "ale.shp")
Ale2 = read_sf("ale.shp")
View(Ale2)
getData("ISP")
getData(data="ISP")
getData(name="GADM", country="ARG" )
X <- 10
y <- x * 10 / 2
Y
Y
x <- 10
x <- 10
y <- x * 10 / 2
z <-  "Hola"
z <- 10 > 5
x <- c(15,2,3)
y <- x * 4 / 2
n <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
n
n*n.
n*n
seq(1,10)
seq(1,100)
seq(1,100,3)
?seq
x <- seq(1,100)
y = x * x - 3* x + 2
plot(x,y)
x <- seq(-100,100)
y = x * x - 3* x + 2
plot(x,y)
p <- c(0,1,10,20,30)
r <- 7*p+2
plot(p,r)
ggplo(p) + geom_point()
ggplot(p) + geom_point()
ggplot(p) + geom_point(aes(fill=r))
ggplot(data=p) + geom_point(aes(fill=r))
t.x<- c(0,1,10,20,30)
t.y <- 7*t.x+2
ggplot(data=t) + geom_point()
ggplot(t) + geom_point()
ggplot() + geom_point(t)
install.packages("raster")
library(raster)
getData(name="GADM", country="ARG" )
getData(name="GADM", country="ARG", level=1 )
Arg <- getData(name="GADM", country="ARG", level=1 )
View(Arg)
plot(Arg)
ggplot() + geom_sf(Arg, aes(fill=NAME_1))
Arg <- NZ %>% st_as_sf()
Arg <- Arg %>% st_as_sf()
ggplot() + geom_sf(Arg, aes(fill=NAME_1))
ggplot() + geom_sf(Arg)
ggplot() + geom_sf(Arg)
colnames(Arg)
Arg$NAME_0
Arg$NAME_1
ggplot() + geom_sf(Arg, aes(fill=NAME_1))
ggplot() + geom_sf(data=Arg, aes(fill = NAME_1))
Arg <- getData(name="GADM", country="ARG", level=2 )
Arg <- Arg %>% st_as_sf()
ggplot() + geom_sf(data=Arg, aes(fill = NAME_1))
DF <- data.frame(lon,c(-66,-67), lat=c(-25,-26), Casa=c("Grande","Chica"))
DF <- data.frame(lon=c(-66,-67), lat=c(-25,-26), Casa=c("Grande","Chica"))
Arg %>% class()
Arg
DF <- data.frame(lon=c(-66,-67), lat=c(-25,-26), Casa=c("Grande","Chica")) %>%
st_as_sf(coords=c(1,2), crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
View(DF)
View(DF)
ggplot() + geom_sf(data=Arg) + geom_sf(data=DF, aes(color=Casa))
Arg <- getData(name="GADM", country="ARG", level=1)
Arg <- Arg %>% st_as_sf()
Arg <- getData(name="GADM", country="ARG", level=1) %>% st_as_sf()
ggplot() + geom_sf(data=Arg, aes(fill = NAME_1))
DF <- data.frame(lon=c(-66,-67), lat=c(-25,-26), Casa=c("Grande","Chica")) %>%
st_as_sf(coords=c(1,2), crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ggplot() + geom_sf(data=Arg) + geom_sf(data=DF, aes(color=Casa))
ggplot() + geom_sf(data=Arg, aes(fill = NAME_1)) + geom_sf(data=DF, aes(color=Casa))
Lluvia <- getData("worldclim", res=10, var = "pre")
Lluvia <- getData("worldclim", res=10, var = "prec")
Lluvia
plot(Lluvia)
plot(Lluvia,colNA="black")
plot(Lluvia[[c(1,2,3)]])
install.packages("rasterVis")
library(rasterVis)
Lluvia <- getData("worldclim", res=10, var = "prec")
Lluvia <- getData("worldclim", res=10, var = "prec")
levelplot(Lluvia)
LLuviaArg <- Lluvia %> crop(Arg)
LLuviaArg <- Lluvia %>% crop(Arg)
plot(LLuviaArg)
LLuviaArg <- Lluvia %>% crop(Arg) %>% mask(Arg)
plot(LLuviaArg)
extract(LLuviaArg, DF)
DF$Prec <- extract(LLuviaArg, DF)
View(DF)
DF$Prec <- extract(sum(LLuviaArg), DF)
View(DF)
plot(Arg)
plot(sum(Arg))
Arg
install.packages("dismo")
arg <- gmap("Argentine")
library(dismo)
arg <- gmap("Argentine")
library(rgdal)
install.packages("rgdal")
arg <- gmap("Argentine")
install.packages("rgdal")
install.packages("rgdal")
library(sp)
library(raster)
library(rasterVis)
library(maptools)
library(rgeos)
library(dismo)
install.packages("maptools")
library(sp)
library(raster)
library(rasterVis)
library(maptools)
library(rgeos)
library(dismo)
library(sp)
library(raster)
library(rasterVis)
library(maptools)
library(rgeos)
library(dismo)
arg <- gmap("Argentina")
plot(arg)
arg <- gmap("Argentina")
install.packages("XML")
arg <- gmap("Argentina")
plot(arg)
arg <- gmap("Argentine")
arg <- gmap("France")
?gmap
library(rgdal)
library(rgdal)
arg <- gmap("France")
arg <- gmap("Australia")
?gmap
?gmap
library(sp)
library(raster)
library(rasterVis)
library(maptools)
library(rgeos)
library(dismo)
library(rgdal)
arg <- gmap("Australia")
plot(arg)
library(rgdal)
# get a map using names
g = gmap('Australia')
plot(g, inter=TRUE)
gs = gmap('Sydney, New South Wales, Australia', type='satellite')
plot(gs, inter=TRUE)
gs = gmap('Sydney, Australia', type='satellite', exp=3)
plot(gs, inter=TRUE)
gs = gmap('Sydney, Australia', type='hybrid', zoom=10, scale=2)
plot(gs, inter=TRUE)
x = runif(30)*10 + 40
y = runif(30)*10 - 20
xy = cbind(x, y)
g = gmap(xy, type='hybrid')
plot(g, inter=TRUE)
points(Mercator(xy) , col='red', pch=20)
View(A)
A.x <- 10
A.y <- 20
View(A)
Plot(A.x, A.y)
plot(A.x, A.y)
A.x <- c(10,12,14)
A.y <- c(20, 18, 22)
plot(A.x, A.y)
install.packages(c("funModeling", "reshape2", "minerva", "mice", "RColorBrewer"))
install.packages("Hmisc")
library(funModeling)
library(dplyr)
data(heart_disease)
force(heart_disease)
# Analizar los datos ingresados
df_status(heart_disease)
my_data_status=df_status(heart_disease, print_results = F)
# Quitar las variables que tienen un 60% de valores cero
vars_to_remove <- filter(my_data_status, p_zeros > 60)  %>% .$variable
vars_to_remove
# Conservar todas las columnas excepto aquellas presentes en el vector 'vars_to_remove'
heart_disease_2=select(heart_disease, -one_of(vars_to_remove))
arrange(my_data_status, -p_zeros) %>% select(variable, q_zeros, p_zeros)
nrow(heart_disease)
ncol(heart_disease)
colnames(heart_disease)
freq(data=heart_disease, input = c('thal','chest_pain'))
freq(data=heart_disease)
freq(data=heart_disease)
# Conservar solamente las dos variables que utilizaremos en este ejemplo
heart_disease_3=select(heart_disease, thal, chest_pain)
# ¡Analizar los datos!
describe(heart_disease_3)
# ¡Analizar los datos!
describe(heart_disease_3)
library(Hmisc)
# Cargar datos desde el repositorio de libros sin alterar el formato
data_world=read.csv(file = "https://goo.gl/2TrDgN", header = T, stringsAsFactors = F, na.strings = "..")
# Excluir los valores faltantes en Series.Code. Los datos descargados de la página web contienen cuatro líneas con "free-text" en la parte inferior del archivo.
data_world=filter(data_world, Series.Code!="")
# La función mágica que conserva los valores más recientes de cada métrica. Si no están familiarizados con R, entonces salten esta parte.
max_ix<-function(d)
{
ix=which(!is.na(d))
res=ifelse(length(ix)==0, NA, d[max(ix)])
return(res)
}
data_world$newest_value=apply(data_world[,5:ncol(data_world)], 1, FUN=max_ix)
# Visualizar las primeras tres filas
head(data_world, 3)
names=unique(select(data_world, Series.Name, Series.Code))
head(names, 5)
df_conv_world=data.frame(
new_name=c("urban_poverty_headcount",
"rural_poverty_headcount",
"gini_index",
"pop_living_slums",
"poverty_headcount_1.9"),
Series.Code=c("SI.POV.URHC",
"SI.POV.RUHC",
"SI.POV.GINI",
"EN.POP.SLUM.UR.ZS",
"SI.POV.DDAY"),
stringsAsFactors = F)
# Agregar el nuevo valor del indicador
data_world_2 = left_join(data_world,
df_conv_world,
by="Series.Code",
all.x=T)
data_world_2 =
mutate(data_world_2, Series.Code_2=
ifelse(!is.na(new_name),
as.character(data_world_2$new_name),
data_world_2$Series.Code)
)
library(reshape2)
data_world_wide=dcast(data_world_2, Country.Name  ~ Series.Code_2, value.var = "newest_value")
# Visualizar las primeras tres filas
head(data_world_wide, 3)
# Visualizar las primeras tres filas
head(data_world_wide, 3)
vars_to_profile=c("gini_index", "poverty_headcount_1.9")
data_subset=select(data_world_wide, one_of(vars_to_profile))
# Utilizar la función `describe` en con junto de datos completo.
# Puede ejecutarse con una variable; por ejemplo, describe(data_subset$poverty_headcount_1.9)
describe(data_subset)
# El análisis numérico completo de una función automáticamente excluye las variables no numéricas
profiling_num(data_world_wide)
# El análisis numérico completo de una función automáticamente excluye las variables no numéricas
profiling_num(data_world_wide)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
plot_num(data_world_wide)
install.packages("dygraphs")
library(ggplot2)
library(xts)
library(dygraphs)
version
# Get IBM and Linkedin stock data from Yahoo Finance
ibm_url <- "http://real-chart.finance.yahoo.com/table.csv?s=IBM&a=07&b=24&c=2010&d=07&e=24&f=2015&g=d&ignore=.csv"
lnkd_url <- "http://real-chart.finance.yahoo.com/table.csv?s=LNKD&a=07&b=24&c=2010&d=07&e=24&f=2015&g=d&ignore=.csv"
yahoo.read <- function(url){
dat <- read.table(url,header=TRUE,sep=",")
df <- dat[,c(1,5)]
df$Date <- as.Date(as.character(df$Date))
return(df)}
ibm  <- yahoo.read(ibm_url)
lnkd <- yahoo.read(lnkd_url)
?dygraphs
??dygraphs
x <- 1:100
y <- x ^ 2 - x
plot(x,y)
library(sf)
library(tidyverse)
library(rworldxtra)
library(raster)
library(rasterVis)
data("countriesHigh")
Mundo <- st_as_sf(countriesHigh)
ggplot() + geom_sf(data = Mundo, aes(fill = REGION))
Africa <- Mundo %>% filter(continent=="Africa")
ggplot() + geom_sf(data=Africa, aes(fill=POP_EST))
PBI_Alto <- Mundo %>% filter(GDP_MD_EST >= median(Mundo$GDP_MD_EST))
Africa <- Africa %>% mutate(Poblacion_mill = POP_EST / 1e6)
Africa <- Africa %>% mutate(PBI_pc = GDP_MD_EST / POP_EST)
ggplot()
+ geom_sf(data=Mundo)
+ geom_sf(data=PBI_Alto, aes(fill=Poblacion_mill))
+ theme_dark()
ggplot()
+ geom_sf(data=Africa, aes(fill=PBI_pc))
Arg <- getData(name="GADM", country="ARG", level=1) %>% st_as_sf()
ggplot() + geom_sf(data=Arg, aes(fill = NAME_1))
DF <- data.frame(lon=c(-66,-67), lat=c(-25,-26), Casa=c("Grande","Chica")) %>%
st_as_sf(coords=c(1,2), crs="+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0")
ggplot() + geom_sf(data=Arg, aes(fill = NAME_1)) + geom_sf(data=DF, aes(color=Casa))
Lluvia <- getData("worldclim", res=10, var = "prec")
levelplot(Lluvia)
LLuviaArg <- Lluvia %>% crop(Arg) %>% mask(Arg)
plot(sum(Arg))
DF$Prec <- extract(sum(LLuviaArg), DF)
%>%
try(setwd("GitHub/catalogo"), silent = TRUE)
#Install Packages
# install.packages("rvest")
# install.packages("rjson")
# install.packages("jsonlite")
library(tidyverse)
library(rvest)
library(jsonlite)
is_error <- function(x) inherits(x, "try-error")
pagina <- function(texto) gsub("https://www.jumbo.com.ar/", "", texto)
precio <- function(texto) gsub(",", ".", gsub("[^0-9,]+", "", texto)) %>% as.numeric()
id     <- function(texto) gsub(".*ids/([0-9]+).*", "\\1", texto)
departamento_incluir <- function(clasificacion) clasificacion %in% list("Almacén", "Bebidas", "Carnes", "Congelados", "Frutas y Verduras", "Lácteos", "Limpieza", "Panadería y Repostería",  "Perfumería", "Quesos y Fiambres")
imagen_file   <- function(imagen) paste0("fotos/",imagen,".jpg")
imagen_url    <- function(imagen, tamaño=512) paste0("https://jumboargentina.vteximg.com.br/arquivos/ids/",imagen,"-", tamaño,"-",tamaño)
imagen_existe <- function(imagen) file.exists(imagen_file(imagen))
imagen_bajar  <- function(imagen, tamaño=512) try( download.file(imagen_url(imagen, tamaño), imagen_file(imagen), mode = 'wb', quiet=TRUE), silent = TRUE)
extraer_nombre <- function(nodo) nodo %>% html_nodes('.product-item__name a') %>% html_text()
extraer_marca  <- function(nodo) nodo %>% html_nodes('.product-item__brand') %>% html_text()
extraer_precio <- function(nodo) nodo %>% html_nodes('.product-prices__value--best-price') %>% html_text() %>% precio()
extraer_pagina <- function(nodo) nodo %>% html_nodes('.product-item__name a') %>% html_attr("href") %>% pagina()
extraer_imagen <- function(nodo) nodo %>% html_nodes('.product-item__image-link img') %>% html_attr("src") %>% id()
recorrer <- function(dato, funcion) {
if( is(dato, "tbl") && isTRUE(nrow(dato) > 0)) {
for(c in 1:nrow( dato )) {
funcion( dato[c,] )
}
}
dato
}
clasificacion_bajar <- function() {
print("BAJANDO CLASIFICACION")
departamentos <- fromJSON('https://www.jumbo.com.ar/api/catalog_system/pub/category/tree/3') %>% filter(hasChildren) %>% arrange(name)
clasificacion = list()
for (d in 1:nrow(departamentos)) {
departamento <- departamentos[d,]
categorias   <- departamento$children[[1]]
for (c in 1:nrow(categorias)) {
if(c > 0 ){
categoria <- categorias[c,]
subcategorias <- categoria$children[[1]]
if (is.null(nrow(subcategorias))) next
for (s in 1:nrow(subcategorias)) {
if( s == 0) next
subcategoria <- subcategorias[s,]
if(is.null(subcategoria$name)){
nombre = "-"
url    = categoria$url
} else {
nombre = subcategoria$name
url    = subcategoria$url
}
item <- tibble(departamento = departamento$name, categoria = categoria$name, subcategoria = nombre, url = url )
str(item)
clasificacion <- bind_rows(clasificacion, item)
}
}
}
}
print("CLASIFICACION BAJADA")
return(clasificacion)
}
clasificacion_escribir <- function(clasificacion) {
write.csv2(clasificacion, "clasificacion.csv")
clasificacion
}
clasificacion_leer <- function() {
read.csv2("clasificacion.csv") %>% as_tibble() %>% filter(departamento_incluir( departamento ) )
}
producto_bajar <- function(url, departamento = "", categoria = "", subcategoria = "") {
url = paste0(url,"?PS=99")
nodos <- read_html(url) %>% html_nodes('.product-shelf li')
nodos <- nodos[ length(nodos %>% html_nodes('.product-item__no-stock')) == 0 ]
productos = tibble(
nombre = nodos %>% extraer_nombre(),
marca  = nodos %>% extraer_marca(),
precio = nodos %>% extraer_precio(),
pagina = nodos %>% extraer_pagina(),
imagen = nodos %>% extraer_imagen()
)
productos$departamento = departamento
productos$categoria    = categoria
productos$subcategoria = subcategoria
productos
}
catalogo_bajar <- function(clasificacion) {
print("BAJANDO CATALOGO")
catalogo = list()
clasificacion %>% recorrer( function(producto) {
productos = try(producto_bajar(producto$url, producto$departamento, producto$categoria, producto$subcategoria))
if (!is_error(productos) ) {
str(productos)
catalogo <- bind_rows(catalogo, productos)
catalogo %>% catalogo_escribir()
}
})
print("CATALOGO BAJADO")
catalogo
}
catalogo_escribir <- function(catalogo){
write.csv2(catalogo, "catalogo.csv")
catalogo
}
catalogo_leer <- function(con_imagen=NA) {
catalogo <- read.csv2("catalogo.csv") %>% as_tibble() %>% filter(departamento_incluir( departamento ))
if( isTRUE(con_imagen)  ) { catalogo <- catalogo %>% filter(imagen_existe(imagen))  }
if( isFALSE(con_imagen) ) { catalogo <- catalogo %>% filter(!imagen_existe(imagen)) }
catalogo
}
imagenes_bajar <- function(catalogo, tamaño = 512, optimizar = FALSE) {
print("BAJANDO IMAGENES")
if(optimizar) { catalogo <- catalogo %>% filter(!imagen_existe(imagen)) }
catalogo %>% recorrer( function(item){
imagen_bajar(item, tamaño )
str(item)
})
print("IMAGENES BAJADAS")
catalogo
}
try(setwd("GitHub/catalogo"), silent = TRUE)
clasificacion_bajar() %>% clasificacion_escribir() %>%
catalogo_bajar() %>% catalogo_escribir() %>%
imagenes_bajar()
catalogo_leer(TRUE)
clasificacion_leer()
clasificacion_leer() %>% catalogo_leer()
clasificacion_leer() %>% catalogo_bajar()
